/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.despegar.sem.connect.mystique;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Identity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Identity\",\"namespace\":\"com.despegar.sem.connect.mystique\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ErdosType\",\"symbols\":[\"UPA\",\"TRACKEAME\",\"SOCIAL\"]}},{\"name\":\"id\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.despegar.sem.connect.mystique.ErdosType type;
  @Deprecated public CharSequence id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Identity() {}

  /**
   * All-args constructor.
   */
  public Identity(com.despegar.sem.connect.mystique.ErdosType type, CharSequence id) {
    this.type = type;
    this.id = id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: type = (com.despegar.sem.connect.mystique.ErdosType)value$; break;
    case 1: id = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public com.despegar.sem.connect.mystique.ErdosType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.despegar.sem.connect.mystique.ErdosType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /** Creates a new Identity RecordBuilder */
  public static com.despegar.sem.connect.mystique.Identity.Builder newBuilder() {
    return new com.despegar.sem.connect.mystique.Identity.Builder();
  }

  /** Creates a new Identity RecordBuilder by copying an existing Builder */
  public static com.despegar.sem.connect.mystique.Identity.Builder newBuilder(com.despegar.sem.connect.mystique.Identity.Builder other) {
    return new com.despegar.sem.connect.mystique.Identity.Builder(other);
  }

  /** Creates a new Identity RecordBuilder by copying an existing Identity instance */
  public static com.despegar.sem.connect.mystique.Identity.Builder newBuilder(com.despegar.sem.connect.mystique.Identity other) {
    return new com.despegar.sem.connect.mystique.Identity.Builder(other);
  }

  /**
   * RecordBuilder for Identity instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Identity>
    implements org.apache.avro.data.RecordBuilder<Identity> {

    private com.despegar.sem.connect.mystique.ErdosType type;
    private CharSequence id;

    /** Creates a new Builder */
    private Builder() {
      super(com.despegar.sem.connect.mystique.Identity.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(com.despegar.sem.connect.mystique.Identity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
    }

    /** Creates a Builder by copying an existing Identity instance */
    private Builder(com.despegar.sem.connect.mystique.Identity other) {
            super(com.despegar.sem.connect.mystique.Identity.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public com.despegar.sem.connect.mystique.ErdosType getType() {
      return type;
    }

    /** Sets the value of the 'type' field */
    public com.despegar.sem.connect.mystique.Identity.Builder setType(com.despegar.sem.connect.mystique.ErdosType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'type' field */
    public com.despegar.sem.connect.mystique.Identity.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public CharSequence getId() {
      return id;
    }

    /** Sets the value of the 'id' field */
    public com.despegar.sem.connect.mystique.Identity.Builder setId(CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'id' field */
    public com.despegar.sem.connect.mystique.Identity.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Identity build() {
      try {
        Identity record = new Identity();
        record.type = fieldSetFlags()[0] ? this.type : (com.despegar.sem.connect.mystique.ErdosType) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
