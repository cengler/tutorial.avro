/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.despegar.sem.connect.mystique;  
@SuppressWarnings("all")
/** Representa una relación entre ids (usado por ahora por erdos) */
@org.apache.avro.specific.AvroGenerated
public class Relationships extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Relationships\",\"namespace\":\"com.despegar.sem.connect.mystique\",\"doc\":\"Representa una relación entre ids (usado por ahora por erdos)\",\"fields\":[{\"name\":\"ids\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Identity\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ErdosType\",\"symbols\":[\"UPA\",\"TRACKEAME\",\"SOCIAL\"]}},{\"name\":\"id\",\"type\":\"string\"}]}}},{\"name\":\"tag\",\"type\":{\"type\":\"enum\",\"name\":\"ErdosTag\",\"symbols\":[\"TRACKEAME_PAGEVIEW\",\"FB_SOFT_LOGIN\",\"CRITEO\"]}},{\"name\":\"datetime\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<Identity> ids;
  @Deprecated public com.despegar.sem.connect.mystique.ErdosTag tag;
  @Deprecated public long datetime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Relationships() {}

  /**
   * All-args constructor.
   */
  public Relationships(java.util.List<Identity> ids, com.despegar.sem.connect.mystique.ErdosTag tag, Long datetime) {
    this.ids = ids;
    this.tag = tag;
    this.datetime = datetime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return ids;
    case 1: return tag;
    case 2: return datetime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: ids = (java.util.List<Identity>)value$; break;
    case 1: tag = (com.despegar.sem.connect.mystique.ErdosTag)value$; break;
    case 2: datetime = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ids' field.
   */
  public java.util.List<Identity> getIds() {
    return ids;
  }

  /**
   * Sets the value of the 'ids' field.
   * @param value the value to set.
   */
  public void setIds(java.util.List<Identity> value) {
    this.ids = value;
  }

  /**
   * Gets the value of the 'tag' field.
   */
  public com.despegar.sem.connect.mystique.ErdosTag getTag() {
    return tag;
  }

  /**
   * Sets the value of the 'tag' field.
   * @param value the value to set.
   */
  public void setTag(com.despegar.sem.connect.mystique.ErdosTag value) {
    this.tag = value;
  }

  /**
   * Gets the value of the 'datetime' field.
   */
  public Long getDatetime() {
    return datetime;
  }

  /**
   * Sets the value of the 'datetime' field.
   * @param value the value to set.
   */
  public void setDatetime(Long value) {
    this.datetime = value;
  }

  /** Creates a new Relationships RecordBuilder */
  public static com.despegar.sem.connect.mystique.Relationships.Builder newBuilder() {
    return new com.despegar.sem.connect.mystique.Relationships.Builder();
  }

  /** Creates a new Relationships RecordBuilder by copying an existing Builder */
  public static com.despegar.sem.connect.mystique.Relationships.Builder newBuilder(com.despegar.sem.connect.mystique.Relationships.Builder other) {
    return new com.despegar.sem.connect.mystique.Relationships.Builder(other);
  }

  /** Creates a new Relationships RecordBuilder by copying an existing Relationships instance */
  public static com.despegar.sem.connect.mystique.Relationships.Builder newBuilder(com.despegar.sem.connect.mystique.Relationships other) {
    return new com.despegar.sem.connect.mystique.Relationships.Builder(other);
  }

  /**
   * RecordBuilder for Relationships instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Relationships>
    implements org.apache.avro.data.RecordBuilder<Relationships> {

    private java.util.List<Identity> ids;
    private com.despegar.sem.connect.mystique.ErdosTag tag;
    private long datetime;

    /** Creates a new Builder */
    private Builder() {
      super(com.despegar.sem.connect.mystique.Relationships.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(com.despegar.sem.connect.mystique.Relationships.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ids)) {
        this.ids = data().deepCopy(fields()[0].schema(), other.ids);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tag)) {
        this.tag = data().deepCopy(fields()[1].schema(), other.tag);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.datetime)) {
        this.datetime = data().deepCopy(fields()[2].schema(), other.datetime);
        fieldSetFlags()[2] = true;
      }
    }

    /** Creates a Builder by copying an existing Relationships instance */
    private Builder(com.despegar.sem.connect.mystique.Relationships other) {
            super(com.despegar.sem.connect.mystique.Relationships.SCHEMA$);
      if (isValidValue(fields()[0], other.ids)) {
        this.ids = data().deepCopy(fields()[0].schema(), other.ids);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tag)) {
        this.tag = data().deepCopy(fields()[1].schema(), other.tag);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.datetime)) {
        this.datetime = data().deepCopy(fields()[2].schema(), other.datetime);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'ids' field */
    public java.util.List<Identity> getIds() {
      return ids;
    }

    /** Sets the value of the 'ids' field */
    public com.despegar.sem.connect.mystique.Relationships.Builder setIds(java.util.List<Identity> value) {
      validate(fields()[0], value);
      this.ids = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'ids' field has been set */
    public boolean hasIds() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'ids' field */
    public com.despegar.sem.connect.mystique.Relationships.Builder clearIds() {
      ids = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'tag' field */
    public com.despegar.sem.connect.mystique.ErdosTag getTag() {
      return tag;
    }

    /** Sets the value of the 'tag' field */
    public com.despegar.sem.connect.mystique.Relationships.Builder setTag(com.despegar.sem.connect.mystique.ErdosTag value) {
      validate(fields()[1], value);
      this.tag = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'tag' field has been set */
    public boolean hasTag() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'tag' field */
    public com.despegar.sem.connect.mystique.Relationships.Builder clearTag() {
      tag = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'datetime' field */
    public Long getDatetime() {
      return datetime;
    }

    /** Sets the value of the 'datetime' field */
    public com.despegar.sem.connect.mystique.Relationships.Builder setDatetime(long value) {
      validate(fields()[2], value);
      this.datetime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'datetime' field has been set */
    public boolean hasDatetime() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'datetime' field */
    public com.despegar.sem.connect.mystique.Relationships.Builder clearDatetime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Relationships build() {
      try {
        Relationships record = new Relationships();
        record.ids = fieldSetFlags()[0] ? this.ids : (java.util.List<Identity>) defaultValue(fields()[0]);
        record.tag = fieldSetFlags()[1] ? this.tag : (com.despegar.sem.connect.mystique.ErdosTag) defaultValue(fields()[1]);
        record.datetime = fieldSetFlags()[2] ? this.datetime : (Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
